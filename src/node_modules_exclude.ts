
import * as excludeConfig from './exclude_config.json';

class NodeModulesExclude {
  serverless: any;
  options: any;
  hooks: any;

  constructor(serverless, options) {
    this.serverless = serverless;
    this.options = options;
    this.hooks = {
      'after:deploy:function:initialize': this.extendExcludes.bind(this),
      'after:package:initialize': this.extendExcludes.bind(this)
    };
  }

  private _appendRootExcludes (excludes: Array<string>) : Array<String>{
    return excludes ? excludeConfig.root.sort().concat(excludes) : excludeConfig.root.sort();
  }

  private _appendNodeExcludes (excludes: Array<string>) : Array<String>{
    let nodeExcludesFullPath = excludeConfig.node_modules.map(val => ( "node_modules/**/" + val)).sort();
    return excludes ? nodeExcludesFullPath.concat(excludes) : nodeExcludesFullPath;
  }

  extendExcludes () {
    
    const service = this.serverless.service;
    service.package = service.package || {};

    let exclude: Array<string> = service.package.exclude || [];

    service.package.exclude = this._appendNodeExcludes(service.package.exclude);
    service.package.exclude = this._appendRootExcludes(service.package.exclude);
  }
}

export = NodeModulesExclude;
